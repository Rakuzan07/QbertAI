isAdjacent(X, 0, Y) :- elevator(X, Y).
enemyReaches(Y) :- enemy(X), isAdjacent(X, Y, _).
enemyReaches(X) :- enemy(X).
greenManReaches(Y) :- greenMan(X), isAdjacent(X, Y, _).
greenBallReaches(Y) :- greenBall(X), isAdjacent(X, Y, _).
inPath(X, X) :- actualPosition(X).
inPath(Y, X) | outPath(Y, X) :- inPath(_, Y), isAdjacent(Y, X, _).
isTarget(X) | isNotTarget(X) :- inPath(_, X).
positionToTake(G) :- inPath(Y, X), actualPosition(Y), isAdjacent(Y, X, G).

:- #count{X : isTarget(X)} != 1.
:- isTarget(X), painted(X).
:- #count{X : positionToTake(X)} != 1.
:- isTarget(X), actualPosition(X).
:~ snake(H), inPath(_, X), L = #count{X,G : isAdjacent(X, G, _)}, L < 3, F = 4 - L. [F@5, X]
:~ inPath(Y, X), isAdjacent(Y, X, _), actualPosition(Y), enemyReaches(X). [1@6, X]
:~ inPath(_, X), enemy(X) . [1@4, X]
:~ snake(H), outPath(9, 0). [1@4, H]
:~ snake(H), outPath(6, 0). [1@4, H]
:~ inPath(_, X), not greenManReaches(X). [1@3, X]
:~ inPath(_, X), not greenBallReaches(X). [1@3, X]
:~ inPath(G, X). [1@2, G, X]
:~ inPath(_, X), painted(X). [1@1, X]